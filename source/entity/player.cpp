#include "player.h"
#include <nothofagus.h>
#include <iostream>
#include "game.h"
#include "piano.h"

namespace Entity
{

PlayerEntity::PlayerEntity() :
    AnimatedEntity(
        {32, 32}, Game::playerPosition,
        {
            { 0.5607843137254902, 0.592156862745098, 0.2901960784313726, 1.0 },
            { 0.00392156862745098, 0.00392156862745098, 0.00392156862745098, 1.0 },
            { 1.0, 0.0, 0.0, 1.0 },
            { 0.0, 0.0, 0.0392156862745098, 1.0 },
            { 0.596078431372549, 0.596078431372549, 0.023529411764705882, 1.0 },
            { 0.3137254901960784, 0.3137254901960784, 0.5411764705882353, 1.0 },
            { 0.0, 0.6274509803921569, 0.0, 1.0 },
            { 1.0, 0.0, 1.0, 1.0 },
            { 0.0, 0.0, 0.0, 1.0 },
            { 0.0, 0.0, 1.0, 1.0 },
            { 0.0, 0.0, 0.0, 0.0 },
        },
        {
            {
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,2,2,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,2,2,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,2,2,2,2,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,2,7,7,2,2,2,2,7,7,2,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,2,2,2,2,7,7,7,7,2,2,2,2,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,2,2,2,2,2,2,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,2,2,2,4,1,4,4,8,4,2,2,2,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,4,4,1,4,4,8,4,4,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,4,4,4,4,4,4,4,4,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,8,4,4,4,4,4,4,8,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,2,9,5,5,5,5,9,2,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,2,2,9,9,9,9,9,9,2,2,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,2,2,9,9,9,9,9,9,2,2,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,2,2,2,9,9,9,9,9,9,2,2,2,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,2,2,8,9,9,9,9,9,9,8,2,2,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,2,2,8,9,9,9,9,9,9,8,2,2,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,8,9,9,9,9,9,9,8,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,8,6,9,8,8,9,6,8,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,8,6,6,8,8,6,6,8,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            },
            {
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,2,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,2,2,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,2,2,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,7,7,7,7,7,7,2,2,2,2,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,7,7,7,7,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,2,2,2,2,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,4,8,4,4,8,2,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,4,4,4,4,8,4,4,8,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,4,4,4,4,4,4,4,4,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,8,8,8,10,4,4,4,4,4,4,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,9,2,2,9,5,5,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,2,2,2,9,9,9,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,2,2,9,9,9,9,2,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,8,8,8,8,8,2,2,2,9,9,9,9,2,2,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,8,8,8,8,2,2,9,9,9,9,9,2,2,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,8,8,8,8,2,2,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,9,9,9,9,9,9,8,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,6,9,8,8,9,6,8,8,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,6,6,8,8,6,6,8,8,8,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            },
            {
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,2,2,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,2,2,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,2,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,2,2,7,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,2,2,2,2,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,2,2,2,2,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,8,4,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,4,4,4,4,4,8,0,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,4,4,4,4,4,4,4,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,4,4,4,4,4,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,2,2,9,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,2,2,9,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,2,2,9,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,2,2,9,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,2,2,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,8,8,8,8,3,9,9,2,2,8,8,8,8,8,8,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,3,9,9,3,8,8,8,8,8,8,8,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,3,6,6,3,8,8,8,8,8,8,8,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,3,6,6,3,8,8,8,8,8,8,8,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            },
            {
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,8,8,9,2,8,9,8,8,8,8,8,8,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,2,2,2,2,8,8,8,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,2,2,2,2,2,2,8,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,8,8,8,4,4,4,4,4,4,4,4,8,8,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,8,8,2,2,9,9,9,9,9,9,2,2,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,8,8,2,2,8,9,9,9,9,9,9,10,2,2,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,8,8,8,8,8,6,9,8,8,9,6,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            },
            {
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
            }
        }

    ), leftKeyPressed(false), rightKeyPressed(false), downKeyPressed(false),
    maxVelocity({13.0f, 18.0f}), acceleration(4.2f), deceleration(5.0f),
    isJumping(false), maxJumpVelocity(9.0f), jumpHeight(0.0f),
    crashTime(1000.0f), crashDuration(1000.0f),
    canMove(true)
{
    _boundingBox.leftBottomCorner() = {-5.0f, -4.0f};
    _boundingBox.rightTopCorner() = {5.0f, 4.0f};
};

void PlayerEntity::setupController(Nothofagus::Controller& controller)
{
    controller.registerAction({ Nothofagus::Key::A, Nothofagus::DiscreteTrigger::Press }, [&]()
    {
        leftKeyPressed = true;
    });
    controller.registerAction({ Nothofagus::Key::LEFT, Nothofagus::DiscreteTrigger::Press }, [&]()
    {
        leftKeyPressed = true;
    });
    controller.registerAction({ Nothofagus::Key::S, Nothofagus::DiscreteTrigger::Press }, [&]()
    {
        downKeyPressed = true;
    });
    controller.registerAction({ Nothofagus::Key::DOWN, Nothofagus::DiscreteTrigger::Press }, [&]()
    {
        downKeyPressed = true;
    });
    controller.registerAction({ Nothofagus::Key::D, Nothofagus::DiscreteTrigger::Press }, [&]()
    {
        rightKeyPressed = true;
    });
    controller.registerAction({ Nothofagus::Key::RIGHT, Nothofagus::DiscreteTrigger::Press }, [&]()
    {
        rightKeyPressed = true;
    });

    controller.registerAction({ Nothofagus::Key::A, Nothofagus::DiscreteTrigger::Release }, [&]()
    {
        leftKeyPressed = false;
    });
    controller.registerAction({ Nothofagus::Key::LEFT, Nothofagus::DiscreteTrigger::Release }, [&]()
    {
        leftKeyPressed = false;
    });
    controller.registerAction({ Nothofagus::Key::S, Nothofagus::DiscreteTrigger::Release }, [&]()
    {
        downKeyPressed = false;
    });
    controller.registerAction({ Nothofagus::Key::DOWN, Nothofagus::DiscreteTrigger::Release }, [&]()
    {
        downKeyPressed = false;
    });
    controller.registerAction({ Nothofagus::Key::D, Nothofagus::DiscreteTrigger::Release }, [&]()
    {
        rightKeyPressed = false;
    });
    controller.registerAction({ Nothofagus::Key::RIGHT, Nothofagus::DiscreteTrigger::Release }, [&]()
    {
        rightKeyPressed = false;
    });
}

void PlayerEntity::update(float dt)
{
    if (!canMove) return;
    if (crashTime < crashDuration)
    {
        crashTime += dt;
        return;
    }
    if (isJumping){
        if (Game::velocity.y < maxJumpVelocity)
            Game::velocity.y += acceleration * dt / 1000;
        else
            Game::velocity.y = maxJumpVelocity;
        jumpHeight += dt / (Game::velocity.y * 40);

        if (jumpHeight > 3.14159)
        {
            Game::canvas.bellota(currentBellotaId).transform().scale().y = 1;
            Game::canvas.bellota(currentBellotaId).transform().scale().x = 1;
            Game::canvas.bellota(currentBellotaId).transform().location().y = Game::playerPosition.y;
            canCollide = true;
            isJumping = false;
            Game::canvas.bellota(currentBellotaId).depthOffset() = 5;
            return;
        }
        Game::canvas.bellota(currentBellotaId).transform().scale().y = 1 + 0.2*sin(jumpHeight);
        Game::canvas.bellota(currentBellotaId).transform().scale().x = (1 + 0.5 * sin(jumpHeight)) *
            Game::canvas.bellota(currentBellotaId).transform().scale().x/abs(Game::canvas.bellota(currentBellotaId).transform().scale().x);
        Game::canvas.bellota(currentBellotaId).transform().location().y = Game::playerPosition.y + 8 * Game::velocity.y * sin(jumpHeight);
        return;
    }
    if (leftKeyPressed && rightKeyPressed) return;
    if (downKeyPressed)
    {
        if (leftKeyPressed)
        {
            Game::canvas.bellota(currentBellotaId).depthOffset() = -1;
            currentBellotaId = this->bellotaIds[1];
            Game::canvas.bellota(currentBellotaId).depthOffset() = 5;
            Game::canvas.bellota(currentBellotaId).transform().scale().x = -abs(Game::canvas.bellota(currentBellotaId).transform().scale().x);
            
            if (Game::velocity.y < maxVelocity.x)
                Game::velocity.y += acceleration * dt / 1000;
            else
                Game::velocity.y = maxVelocity.x;
            if (Game::velocity.x < maxVelocity.y)
                Game::velocity.x += acceleration * dt / 500;
            else
                Game::velocity.x = maxVelocity.y;
        }
        else if (rightKeyPressed)
        {
            Game::canvas.bellota(currentBellotaId).depthOffset() = -1;
            currentBellotaId = this->bellotaIds[1];
            Game::canvas.bellota(currentBellotaId).depthOffset() = 5;
            Game::canvas.bellota(currentBellotaId).transform().scale().x = abs(Game::canvas.bellota(currentBellotaId).transform().scale().x);
            
            if (Game::velocity.y < maxVelocity.x)
                Game::velocity.y += acceleration * dt / 1000;
            else
                Game::velocity.y = maxVelocity.x;
            if (Game::velocity.x > -maxVelocity.y)
                Game::velocity.x -= acceleration * dt / 500;
            else
                Game::velocity.x = -maxVelocity.y;
        }
        else
        {
            Game::canvas.bellota(currentBellotaId).depthOffset() = -1;
            currentBellotaId = this->bellotaIds[0];
            Game::canvas.bellota(currentBellotaId).depthOffset() = 5;
            
            if (Game::velocity.y < maxVelocity.y)
                Game::velocity.y += acceleration * dt / 1000;
            else
                Game::velocity.y = maxVelocity.y;
            if (Game::velocity.x > 0)
                Game::velocity.x -= deceleration * dt / 250;
            else if (Game::velocity.x < 0)
                Game::velocity.x += deceleration * dt / 250;
            else
                Game::velocity.x = 0;
        }
    }
    else
    {
        if (leftKeyPressed)
        {
            Game::canvas.bellota(currentBellotaId).depthOffset() = -1;
            currentBellotaId = this->bellotaIds[2];
            Game::canvas.bellota(currentBellotaId).depthOffset() = 5;
            Game::canvas.bellota(currentBellotaId).transform().scale().x = -abs(Game::canvas.bellota(currentBellotaId).transform().scale().x);

            if (Game::velocity.y > 0)
                Game::velocity.x += acceleration * dt / 250;
        }
        else if (rightKeyPressed)
        {
            Game::canvas.bellota(currentBellotaId).depthOffset() = -1;
            currentBellotaId = this->bellotaIds[2];
            Game::canvas.bellota(currentBellotaId).depthOffset() = 5;
            Game::canvas.bellota(currentBellotaId).transform().scale().x = abs(Game::canvas.bellota(currentBellotaId).transform().scale().x);

            if (Game::velocity.y > 0)
                Game::velocity.x -= acceleration * dt / 250;
        }
        else
        {
            Game::canvas.bellota(currentBellotaId).depthOffset() = -1;
            currentBellotaId = this->bellotaIds[0];
            Game::canvas.bellota(currentBellotaId).depthOffset() = 5;
        }

        if (Game::velocity.y > 0)
            Game::velocity.y -= deceleration * dt / 1000;
        else
            Game::velocity.y = 0;
        if (Game::velocity.x > 0)
            Game::velocity.x -= deceleration * dt / 250;
        else if (Game::velocity.x < 0)
            Game::velocity.x += deceleration * dt / 250;
        else
            Game::velocity.x = 0;
    }
}

void PlayerEntity::reset()
{
    canMove = true;
    Game::velocity.x = 0;
    Game::velocity.y = 0;
    canCollide = true;
    leftKeyPressed = false;
    downKeyPressed = false;
    rightKeyPressed = false;
}

void PlayerEntity::jump()
{
    if (!isJumping)
    {
        canCollide = false;
        isJumping = true;
        maxJumpVelocity = Game::velocity.y + 9.0f;
        jumpHeight = 0.0f;
        Game::canvas.bellota(currentBellotaId).depthOffset() = 11;
        Piano::sounds["jump"]->play();
    }

}

void PlayerEntity::crash()
{
    crashTime = 0.0f;
    Game::velocity.x = 0;
    Game::velocity.y = 0;
    Game::canvas.bellota(currentBellotaId).depthOffset() = -1;
    currentBellotaId = this->bellotaIds[3];
    Game::canvas.bellota(currentBellotaId).depthOffset() = 5;
    Piano::sounds["crash"]->play();
}

void PlayerEntity::die()
{
    canMove = false;
    canCollide = false;
    Game::velocity.x = 0;
    Game::velocity.y = 0;
    Game::canvas.bellota(currentBellotaId).depthOffset() = -1;
    currentBellotaId = this->bellotaIds[4];
    Game::canvas.bellota(currentBellotaId).depthOffset() = 5;
    Game::end = true;
}

}